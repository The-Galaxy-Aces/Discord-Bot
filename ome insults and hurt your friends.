diff --git a/bot/bot.py b/bot/bot.py
index 4239489..83d7cbe 100644
--- a/bot/bot.py
+++ b/bot/bot.py
@@ -5,6 +5,7 @@ from time import localtime, strftime
 
 from bot.features.insult.insult import Insult
 from bot.features.music.music import Music
+from bot.features.poll.poll import Poll
 from bot.features.utility.utility import Utility
 
 
@@ -17,8 +18,8 @@ class Bot(discord.ext.commands.Bot):
 
         # Check CONFIG for minimal required params to make bot run properly
         REQUIRED_PARAMS = [
-            'bot_id', 'command_prefix','enabled_features',
-            'logging', 'name', 'token'
+            'bot_id', 'command_prefix', 'enabled_features', 'logging', 'name',
+            'token'
         ]
 
         MISSING_PARAMS = [
@@ -55,8 +56,8 @@ class Bot(discord.ext.commands.Bot):
         or it will append to current log file if one exists.
         """
         LOG_PATHS = {
-            "win32" : "logs",
-            "linux" : os.path.join("/var", "log", "discord_bot"),
+            "win32": "logs",
+            "linux": os.path.join("/var", "log", "discord_bot"),
         }
         LOG_PATH = LOG_PATHS[self.os_type]
         DATE_STAMP = strftime("%Y-%m-%d", localtime())
@@ -74,11 +75,7 @@ class Bot(discord.ext.commands.Bot):
         self.log.addHandler(self.handler)
 
     def _enable_features(self):
-        VALID_FEATURES = {
-            "insult" : Insult,
-            "music" : Music,
-            "utility" : Utility
-        }
+        VALID_FEATURES = {"insult": Insult, "music": Music, "utility": Utility}
 
         print(f"{self.name} enabled features:", end="\n")
         for feature in self.enabled_features:
diff --git a/bot/features/insult/insult.py b/bot/features/insult/insult.py
index 693c38f..b6a1a0c 100644
--- a/bot/features/insult/insult.py
+++ b/bot/features/insult/insult.py
@@ -5,9 +5,6 @@ from bot.features.tgacog import TGACog
 
 
 class Insult(TGACog):
-    '''
-    Auto generate some insults and hurt your friends.
-    '''
     def __init__(self, bot):
         """
         Don't let the mean insults hurt your feelings
@@ -43,7 +40,6 @@ class Insult(TGACog):
         '''
         Activates on every message which is sent which the bot has access to read.
         '''
-        # Torment a user if they exist in the torment list and sent the message.
         for tormented in self.torment_list:
             if tormented == message.author.mention:
                 await message.channel.send(f"{tormented} {self.get_insult()}")
@@ -69,8 +65,7 @@ class Insult(TGACog):
         Torments the mentioned user(s) by insulting them with every message.
         '''
         for mention in ctx.message.mentions:
-            if mention.mention not in self.torment_list \
-                    and mention.mention != ctx.bot.user.mention:
+            if mention.mention not in self.torment_list:
                 self.torment_list.append(mention.mention)
 
     @insult.command(aliases=['u'])
diff --git a/bot/features/poll/__init__.py b/bot/features/poll/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/bot/features/poll/poll.py b/bot/features/poll/poll.py
new file mode 100644
index 0000000..184d19c
--- /dev/null
+++ b/bot/features/poll/poll.py
@@ -0,0 +1,83 @@
+from discord.ext import commands
+from bot.features.tgacog import TGACog
+
+
+class Poll(TGACog):
+    def __init__(self, bot):
+
+        self.bot = bot
+
+        self.polls = {}
+        self.cmd = ""
+
+    @commands.command()
+    async def poll(self, ctx, *args):
+        '''
+        Create a new poll.
+        Usage:
+        '''
+        print(args)
+        cmd = args
+
+        if cmd[0] == "create":
+            self.create(cmd[1:])
+            await ctx.message.channel.send(
+                f"""````A new poll is available: {self.polls}```""")
+        elif cmd[0] == "stats":
+            self.stats(cmd[1:])
+        elif cmd[0] == "vote":
+            self.vote(cmd[1:], ctx.message.author.mention)
+        else:
+            help(self)
+
+        await ctx.message.delete()
+
+    @commands.command()
+    async def list(self, ctx, *args):
+        print("list")
+
+    def create(self, cmd):
+        '''
+        Creates a new poll
+        useage: poll create YOUR POLL NAME : VALUE1 : VALUE2 : VALUE3 : ... : VALUEN
+        '''
+
+        params = ' '.join(cmd).split(' : ')
+        print(f"params: {params}")
+
+        if len(params) < 3:
+            print("Not enough values")
+            return
+
+        pollName = params[0]
+        pollValues = dict.fromkeys(params[1:], 0)
+        print(f"pollName: {pollName}")
+
+        if not self.polls.get(pollName):
+            self.polls.update(
+                {pollName: {
+                    "values": pollValues,
+                    "alreadyVoted": []
+                }})
+        else:
+            # TODO if the poll exists then show a message
+            pass
+
+        print(self.polls)
+
+    def vote(self, cmd, voter):
+        poll = self.polls.get(cmd[0])
+        usersVote = cmd[1]
+
+        if poll and voter not in poll.get("alreadyVoted"):
+            print(poll.get("alreadyVoted"))
+            poll.get("values")[usersVote] += 1
+            poll.get("alreadyVoted").append(voter)
+        else:
+            #TODO tell user they have already voted
+            # Maybe we can allow them to switch the vote
+            pass
+        print(self.polls)
+
+    def stats(self, cmd):
+        pass
diff --git a/main.py b/main.py
index 5bda4a1..7de6819 100644
--- a/main.py
+++ b/main.py
@@ -7,12 +7,12 @@ import sys
 from bot.bot import Bot
 from bot.tgacli import TGACli
 
+
 def main():
 
     CONFIG_FILE = "config.yaml"
     OSTYPE = sys.platform
 
-
     async def threaded_bot(bot):
         await bot.start(bot.get_token())
 
@@ -20,10 +20,9 @@ def main():
         if not loop.is_running():
             loop.run_forever()
 
-    def signal_handler(sig,frame):
+    def signal_handler(sig, frame):
         sys.exit(0)
 
-
     # Check for config file
     if not os.path.exists(CONFIG_FILE):
         raise OSError(f"{CONFIG_FILE} not found or missing")

